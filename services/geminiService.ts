import { GoogleGenAI, Modality, Part } from "@google/genai";
import { Product } from '../types';

const apiKey = process.env.API_KEY;

export const isApiKeySet = !!apiKey;

let ai: GoogleGenAI | null = null;
if (isApiKeySet) {
    ai = new GoogleGenAI({ apiKey });
} else {
    console.error("VITE_GEMINI_API_KEY is not set. The app will have limited functionality.");
}


// Helper function to fetch an image from a URL and convert it to a base64 string
const urlToBase64 = (url: string): Promise<{ data: string, mimeType: string }> => {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.crossOrigin = 'Anonymous'; // This is crucial for fetching images from other domains
        
        img.onload = () => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            if (!ctx) {
                return reject(new Error('Could not get canvas context.'));
            }

            const MAX_DIMENSION = 512;
            let { naturalWidth: width, naturalHeight: height } = img;

            if (width > height) {
                if (width > MAX_DIMENSION) {
                    height *= MAX_DIMENSION / width;
                    width = MAX_DIMENSION;
                }
            } else {
                if (height > MAX_DIMENSION) {
                    width *= MAX_DIMENSION / height;
                    height = MAX_DIMENSION;
                }
            }
            
            canvas.width = width;
            canvas.height = height;
            
            ctx.drawImage(img, 0, 0, width, height);
            
            const dataUrl = canvas.toDataURL('image/png');
            const mimeType = 'image/png';
            const base64Data = dataUrl.split(',')[1];
            
            resolve({ data: base64Data, mimeType });
        };
        
        img.onerror = (err) => {
            // This often happens due to CORS errors if the server doesn't send the right headers.
            console.error(`Failed to load image for canvas processing (CORS issue likely): ${url}`, err);
            reject(new Error(`Could not load image from URL: ${url}. This may be a cross-origin (CORS) issue.`));
        };
        
        img.src = url;
    });
};


export const generateTryOnImage = async (
    personImageBase64: string,
    personImageMimeType: string,
    products: Product[]
): Promise<string> => {
    if (!ai) {
        throw new Error("Gemini API key is not configured. Please set it in your deployment environment variables.");
    }
    
    try {
        const personImagePart: Part = {
            inlineData: {
                data: personImageBase64,
                mimeType: personImageMimeType,
            },
        };

        const productPromises = products.map(product => urlToBase64(product.imageUrl));
        const productImages = await Promise.all(productPromises);

        const productImageParts: Part[] = productImages.map(image => ({
            inlineData: {
                data: image.data,
                mimeType: image.mimeType,
            },
        }));

        const productNames = products.map(p => `"${p.name}"`).join(', ');
        const textPart: Part = {
            text: `Take the clothing items from the following images and realistically place them on the person in the first image to create a complete outfit. The clothing items are: ${productNames}. The person should be wearing all the items, layered correctly (e.g., a shirt under a jacket). Maintain the original background and the person's pose.`,
        };

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image-preview',
            contents: {
                parts: [
                    personImagePart,
                    ...productImageParts,
                    textPart,
                ],
            },
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });
        
        if (response.candidates && response.candidates[0].content && response.candidates[0].content.parts) {
            for (const part of response.candidates[0].content.parts) {
                if (part.inlineData) {
                    return part.inlineData.data;
                }
            }
        }

        throw new Error("No image was generated by the model.");

    } catch (error) {
        console.error("Error generating virtual try-on image:", error);
        throw new Error("Failed to generate virtual try-on image. Please try again.");
    }
};